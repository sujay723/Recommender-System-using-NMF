# -*- coding: utf-8 -*-
"""Recommender System using NMF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bd-ryzPX7Q_MUheWUvmDHy645D0OGKGS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import NMF
from sklearn.metrics.pairwise import cosine_similarity

# Synthetic dataset for illustration purposes
data = {
    "User1": [3, 1, 4, 0, 0],
    "User1": [0, 5, 0, 2, 0],
    "User1": [0, 0, 0, 5, 1],
    "User1": [5, 0, 5, 0, 3],
}


df = pd.DataFrame(data, index=["Item1", "Item2", "Item3", "Item4", "Item5"])

# Apply NMF for recommendation
nmf_recommender = NMF(n_components=5, random_state=42)
W = nmf_recommender.fit_transform(df)
H = nmf_recommender.components_

# Recommend values for a specific user
target_user = "User1"
user_index = df.columns.get_loc(target_user)
recommendations = np.dot(W, H[:, user_index])

# Display the recommendations
df_recommendations = pd.DataFrame(recommendations, index=df.index, columns=["Recommendation"])
df_recommendations.sort_values(by="Recommendation", ascending=False, inplace=True)
print(f"recommendation for (target_user):")
print(df_recommendations)

from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

def find_similar_items(item, W_matrix, item_index_map):
    # Find index of the target item
    item_idx = item_index_map.get_loc(item)

    # Compute cosine similarity
    similarities = cosine_similarity(W_matrix[item_idx].reshape(1, -1), W_matrix).flatten()

    # Build DataFrame of similarities
    similar_items = pd.DataFrame({
        "Item": item_index_map,
        "Similarity": similarities
    })

    # Remove the item itself
    similar_items = similar_items[similar_items["Item"] != item]

    # Sort and reset index
    similar_items = similar_items.sort_values(by="Similarity", ascending=False).reset_index(drop=True)

    return similar_items

# Example usage
target_item = "Item1"
similar_items_df = find_similar_items(target_item, W, df.index)

print(f"Similar items to '{target_item}':")
print(similar_items_df.head(10))

# Function to recommend specific values based on user preferences
def recommend_specific_values(user, W_matrix, H_matrix, user_index_map, item_index_map):
  user_idx = user_index_map.get_loc(user)
  item_idx = np.argmax(np.dot(W_matrix[:,user_idx], H_matrix))
  recommended_item = item_index_map[item_idx]
  return recommended_item

# Recommend a specific value for 'User1'
target_user_specific = 'User1'
recommended_item_specific = recommend_specific_values(target_user_specific, W, H, df.columns, df.index)

print(f"Recommended specfic value for {target_user_specific}: {recommended_item_specific}")

